{
  "title": "8-Bit Calculator (FPGA)",
  "date": "2021-10-03",
  "titleColor": "#FFFFFF",
  "description": "An 8-bit signed calculator capable of performing basic operations on FPGA. Controlable with a remote.",
  "imageUrl": "/img/FPGA",
  "logoUrl": "/img/FPGA/logo.png",
  "githubUrl": "https://github.com/Loxed/vhdl-calc",
  "themeColor": "#18395A",
  "logoBackgroundColor": "#FFFFFF",
  "category": [
    "embedded-systems",
    "sp"
  ],
  "tags": [
    "DE10-Lite",
    "VHDL",
    "FPGA",
    "IR NEC Protocol",
    "FSM"
  ],
  "status": "completed",
  "id": "8-bit-calculator-(fpga)",
  "markdown": "# Calculatri'ECE: FPGA-Based Calculator with VHDL\n\n## Overview\n\n**Project Type:** Team-based FPGA design (4 members) \n**Role:** Co-developer (Léopold Rombaut) \n**Tech Stack:** VHDL, Intel DE10-Lite FPGA, NEC Infrared Protocol, 74LS283 CLA Adder, 7-segment displays, GPIO, Buzzer\n**Duration:** 4 weeks (Semester 3, 2021)\n\nDesigned and implemented a **4-bit calculator** on an FPGA, capable of performing **signed/unsigned addition and multiplication** (internally or using an external 74LS283 CLA adder). The system interfaces with a **CarMP3 infrared remote** for input, displays results on **6x 7-segment displays**, and provides audio feedback via a **buzzer**. The project demonstrates **hardware-software co-design**, **state machines**, and **real-time signal processing** in VHDL.\n\n**Key Features:**\n- Supports **4-bit signed/unsigned arithmetic** (addition, multiplication).\n- **External hardware integration**: Uses 74LS283 4-bit CLA adder for external operations.\n- **User feedback**: 7-segment displays, LEDs for mode/status, and buzzer for result confirmation.\n- **Protocol handling**: Decodes NEC infrared signals for remote input.\n- **Overflow detection**: Handles 4-bit result constraints with overflow indicators.\n\n\n## Technical Approach\n\n### **1. System Architecture**\n- **Modular Design**: Separate VHDL modules for **input reception**, **calculation**, **display**, and **audio feedback**.\n- **State Machine**: Moore machine to manage operation flow (operand input, operator selection, result output).\n- **Hardware Constraints**: 4-bit results (with overflow handling) due to DE10-Lite FPGA GPIO/LED limitations.\n\n### **2. Key Algorithms & Protocols**\n- **NEC Protocol Decoding**: \n  - Infrared remote signals decoded using timing analysis (9ms leading pulse, 4.5ms space, 562µs/1.6875ms for 0/1 bits).\n  - Address/command extracted from 32-bit frames (8-bit address + inverse, 8-bit command + inverse).\n- **Arithmetic Logic**:\n  - **Signed Operations**: Uses **two’s complement** for negative numbers.\n  - **Unsigned Operations**: Direct binary arithmetic with overflow detection.\n  - **External Addition**: Leverages **74LS283 CLA (Carry Lookahead Adder)** for faster external addition.\n- **Display Logic**:\n  - BCD to 7-segment decoder for numeric display.\n  - LED indicators for **mode (signed/unsigned)**, **operation type (add/multiply)**, and **external adder usage**.\n- **Audio Feedback**:\n  - Buzzer frequency modulated (800Hz for positive, 200Hz for negative results) using **10MHz FPGA clock** and counter-based timing.\n\n### **3. Hardware Interfacing**\n- **GPIO Pins**: Used for bidirectional communication with external adder (74LS283) and buzzer.\n- **7-Segment Displays**: Multiplexed to show operands/results (3 displays for negative results: 2 for value, 1 for sign).\n- **LEDs**: 10 onboard LEDs for mode/status indication (e.g., signed mode, external adder active).\n\n\n## Challenges & Solutions\n\n| **Challenge**                          | **Solution**                                                                                     |\n|----------------------------------------|--------------------------------------------------------------------------------------------------|\n| **Remote Signal Decoding**             | Implemented timing-sensitive NEC protocol parser in VHDL; used testbench to validate bit detection. |\n| **Signed Arithmetic Complexity**      | Designed custom logic for two’s complement handling; verified with edge-case testing (e.g., -7 + 5). |\n| **External Adder Integration**         | Mapped FPGA GPIO pins to 74LS283 inputs/outputs; added delay compensation for signal propagation. |\n| **Overflow Handling**                  | Truncated 8-bit intermediate results to 4 bits; used overflow flag to alert users via LED/buzzer. |\n| **Real-Time Audio Feedback**           | Generated precise buzzer frequencies using clock dividers (10MHz → 200Hz/800Hz).               |\n| **Team Coordination**                  | Divided tasks by module (reception, calculation, display, audio); used Gantt chart for tracking. |\n\n\n## Results / Impact\n\n- **Functional Prototype**: Successfully performed **signed/unsigned addition/multiplication** with external/internal logic.\n- **User Experience**: Intuitive feedback via **displays, LEDs, and audio**, accommodating both technical and non-technical users.\n- **Educational Outcomes**:\n  - Deepened understanding of **VHDL**, **FPGA architecture**, and **hardware-software interaction**.\n  - Gained hands-on experience with **state machines**, **protocol decoding**, and **real-time systems**.\n- **Limitations & Lessons**:\n  - **4-bit constraint** limited operation range (e.g., max unsigned result = 15).\n  - **Bonus Feature (VGA Output)** abandoned due to time constraints; highlighted need for early complexity assessment.\n\n\n## References\n\n- **Code Repository**: [loxed/vhdl-calc (GitHub)](https://github.com/Loxed/vhdl-calc)\n- **FPGA Documentation**: [Intel DE10-Lite User Manual (Terasic)](https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=167&No=836&PartNo=1)\n- **NEC Protocol**: [SB Projects: Infrared Remote Control](http://www.sbprojects.net/knowledge/ir/nec.php)\n- **74LS283 Datasheet**: [TI SN74LS283 (PDF)](https://www.ti.com/lit/ds/symlink/sn74ls283.pdf)\n- **VHDL References**: [IEEE VHDL LRM (2011)](https://standards.ieee.org/standard/1076-2011.html), [VHDL for FPGA Design (Nandland)](https://nandland.com/)\n"
  }

{
  "title": "Fintech App Development",
  "date": "2023-01-12",
  "titleColor": "#FFFFFF",
  "description": "Implemented microservices (fund transfers, transaction history, image compression) into 300M+ users Fintech super app.",
  "imageUrl": "/img/payby",
  "logoUrl": "/img/payby/logo.png",
  "demoUrl": "https://www.botim.money/point-of-sale",
  "themeColor": "#4ade4a",
  "logoBackgroundColor": "#FFFFFF",
  "category": [
    "software",
    "backend"
  ],
  "tags": [
    "Rust",
    "Backend",
    "Kanban",
    "Microservices",
    "Domain-Driven Design"
  ],
  "type": "Internship",
  "id": "fintech-app-development",
  "markdown": "## Overview\n\nDeveloped mission-critical microservices for **Astra Tech's ultra-app ecosystem** (300M+ users globally), integrating remittance (international money transfer), referral systems, and backend infrastructure during a high-stakes merger of three companies: PayBy (fintech), Botim (messaging), and Rizek (home services). This $500M-funded project aimed to create the Middle East's first **\"ultra-app\"** — a WeChat-style super-platform combining financial services, communication, and e-commerce.\n\n**Context:** Two consecutive internships (2022, 2023) at PayBy/Astra Tech during their transformation from standalone fintech to integrated ultra-app, working with a distributed team across 20+ countries during rapid organizational consolidation.\n\n## Technical Approach\n\n### System Architecture\n\n**Tech Stack:**\n- **Backend Language:** Rust (memory safety, concurrency, performance)\n- **Databases:** MySQL (relational), Redis (in-memory caching for <1ms lookups)\n- **Architecture:** Domain-Driven Design (DDD) with microservices\n- **Communication:** AMQP/RabbitMQ (asynchronous message queuing)\n- **Methodology:** Agile/Kanban with continuous delivery\n- **Tools:** Git, Figma (UI specs → backend translation), API Gateway\n\n### Core Systems Developed\n\n**1. Remittance (International Money Transfer) Service**\n\n**Problem:** Integrate PayBy's fund transfer capabilities into Botim messaging app to enable seamless cross-border payments for migrant workers (primary user demographic in UAE/MENA region).\n\n**Implementation:**\n- **Domain Model:** User accounts, beneficiaries, transfer requests, compliance (KYC/AML), transaction history\n- **Microservice Architecture:**\n  ```\n  API Gateway → Remittance Service → [Database: MySQL + Redis]\n                ↓ AMQP/RabbitMQ\n         [Payment Processing] [Compliance Check] [Notification Service]\n  ```\n- **Key Features:**\n  - Real-time exchange rate calculation\n  - Multi-currency support (AED, USD, INR, PHP, PKR, etc.)\n  - Asynchronous processing for high-volume transactions\n  - Idempotency keys to prevent duplicate transfers\n  - Audit logging for regulatory compliance\n\n**Rust Performance Benefits:**\n- Zero-cost abstractions for financial calculations (no rounding errors)\n- Concurrent transaction processing via async/await\n- Memory safety preventing common vulnerabilities (buffer overflows, race conditions)\n\n**2. Referral/Loyalty System**\n\n**Business Goal:** Viral growth through incentivized user acquisition (\"parrainage\" system).\n\n**System Design:**\n```rust\n// Domain entities (simplified)\nstruct Referral {\n    referrer_id: UserId,\n    referee_id: UserId,\n    campaign_id: CampaignId,\n    reward_type: RewardType,  // Discount, credits, coupons\n    status: ReferralStatus,\n}\n\nenum RewardType {\n    FirstTransactionBonus(Amount),\n    PercentageDiscount(f32),\n    Coupon(CouponId),\n}\n```\n\n**Features:**\n- Deep linking for invitation sharing (SMS, social media, in-app messaging)\n- Campaign management SaaS for merchants (self-service dashboard)\n- Fraud detection: Rate limiting, duplicate account detection\n- Redis caching for campaign rules (low-latency lookup)\n- Event-driven reward distribution via AMQP\n\n**Scalability:**\n- Stateless service design enables horizontal scaling\n- Redis cluster for distributed caching (100K+ referrals/day)\n- Async message processing decouples reward distribution from user flow\n\n**3. Domain-Driven Design Implementation**\n\n**DDD Principles Applied:**\n- **Bounded Contexts:** Separate domains for User Management, Payment Processing, Messaging, Rewards\n- **Aggregates:** Transaction as aggregate root (consistency boundary)\n- **Value Objects:** Money (amount + currency), UserId (type-safe identifiers)\n- **Domain Events:** `TransactionCompleted`, `ReferralActivated` → triggers downstream actions\n\n**Example Domain Model:**\n```rust\n// Banking domain\nstruct BankAccount {\n    account_number: AccountNumber,\n    balance: Money,\n    transaction_history: Vec<Transaction>,\n}\n\n// Customer domain (separate microservice)\nstruct Customer {\n    name: String,\n    email: Email,\n    phone: PhoneNumber,\n    kyc_status: KYCStatus,\n}\n```\n\n**Inter-Service Communication:**\n- **Synchronous:** REST APIs via API Gateway (user-facing operations)\n- **Asynchronous:** RabbitMQ for background tasks (notifications, analytics)\n- **Data Consistency:** Event sourcing for audit trail, eventual consistency across services\n\n**4. AMQP/RabbitMQ Message Queue**\n\n**Use Cases:**\n- Decouple remittance request from payment processing\n- Asynchronous reward distribution (referral bonuses)\n- Cross-service notifications (SMS, push, email)\n\n**Queue Architecture:**\n```\n[Producer: Remittance Service] \n       ↓ (publish)\n[Exchange: remittance.events]\n       ↓ (route)\n[Queues: payment.processing, compliance.check, notification.send]\n       ↓ (consume)\n[Consumers: Payment Service, Compliance Service, Notification Service]\n```\n\n**Benefits:**\n- **Fault Tolerance:** Message persistence survives service crashes\n- **Load Leveling:** Queue buffers traffic spikes\n- **Decoupling:** Services evolve independently\n\n### Development Workflow\n\n**Agile/Kanban Process:**\n1. **Requirements Analysis:** Product marketing defines user stories with Figma mockups\n2. **Technical Spec:** Translate UI flows → API contracts, database schemas\n3. **Implementation:** Rust development with test-driven approach\n4. **Code Review:** PR review by senior engineers (Zenas Song, Wujiang Ding)\n5. **Testing:** Unit tests (Rust's built-in framework), integration tests, load testing\n6. **Deployment:** Continuous delivery to staging → production\n\n**Kanban Board Stages:**\n```\n[Backlog] → [In Progress] → [Code Review] → [Testing] → [Deployed]\n```\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **Merger complexity:** Integrating 3 platforms with different tech stacks | DDD/microservices isolate legacy systems; gradual migration to unified architecture |\n| **Scalability:** 100M+ users, high transaction volume | Rust's performance + Redis caching + horizontal scaling; stateless services |\n| **Regulatory compliance:** Financial services require audit trails | Event sourcing for transaction history; immutable logs; KYC/AML checks |\n| **Distributed team:** 100+ engineers across 20+ countries | Asynchronous communication (Slack, Jira); clear API contracts; documentation |\n| **Language learning curve:** Rust's steep ownership/borrowing model | Pair programming with Rust expert (Wujiang Ding); iterative code reviews |\n| **Data consistency:** Eventual consistency across microservices | Idempotency keys; saga pattern for distributed transactions; compensating actions |\n\n## Results / Impact\n\n**Business Metrics:**\n- ✅ **Remittance integration** successfully deployed to production (Botim app)\n- ✅ **Referral system** driving viral growth (incentivized user acquisition)\n- ✅ **300M+ user base** supported by scalable infrastructure\n- ✅ **$500M merger** technical integration completed on schedule\n\n**Technical Achievements:**\n- Designed **production-grade microservices** handling thousands of transactions/day\n- Implemented **Domain-Driven Design** patterns for complex financial domain\n- Gained mastery of **Rust** for backend systems (memory safety, concurrency)\n- Applied **asynchronous message queuing** (RabbitMQ) for event-driven architecture\n- Contributed to **startup during hyper-growth phase** (merger, rapid scaling)\n\n**Engineering Skills:**\n- **Backend Development:** Rust, microservices, RESTful APIs, database design\n- **Distributed Systems:** Message queues, eventual consistency, service choreography\n- **Financial Systems:** Transaction processing, compliance, fraud detection\n- **Software Architecture:** DDD, bounded contexts, aggregates, domain events\n- **DevOps:** Git workflows, CI/CD, cloud deployment (AWS implied)\n\n**Learning Outcomes:**\n- **Startup Experience:** Agile methodology, rapid iteration, product-market fit\n- **Merge & Acquisition:** Technical debt management, platform consolidation\n- **International Team:** Cross-cultural collaboration, remote work practices\n- **Fintech Domain:** Payment systems, regulatory constraints, security best practices\n- **Rust Ecosystem:** Async/await, trait systems, zero-cost abstractions\n\n**Career Insights:**\n> \"This experience reinforced my interest in embedded systems, as software is progressively permeating all domains including electronics (FPGAs, Network-on-Chip). The embedded systems engineer is trained to tackle problems across multiple domains using cutting-edge technologies.\" — Internship reflection\n\n## References\n\n- [Botim Point of Sale](https://www.botim.money/point-of-sale) (Astra Tech product)\n- **Company Background:**\n  - Astra Tech: $500M Series A (2022) for ultra-app consolidation\n  - PayBy: Founded 2020, 150M+ transactions processed\n  - Botim: Leading messaging app in MENA region\n- **Technical References:**\n  - Domain-Driven Design (Eric Evans)\n  - Microservices Architecture patterns\n  - RabbitMQ message queuing documentation\n  - Rust async programming guide\n\n**Technologies:** Rust, Microservices, Domain-Driven Design (DDD), AMQP/RabbitMQ, MySQL, Redis, REST APIs, Agile/Kanban, Git, API Gateway, Event Sourcing, Financial Systems, Fintech"
}
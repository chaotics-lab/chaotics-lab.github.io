{
  "title": "Autonomous Racing Car",
  "date": "2024-07-21",
  "titleColor": "#FFFFFF",
  "description": "Led a team of 30 students in developing a fully autonomous vehicle and implemented Edge AI for race trajectory.",
  "imageUrl": "/img/arece",
  "logoUrl": "/img/arece/logo.png",
  "themeColor": "#21188c",
  "logoBackgroundColor": "#FFFFFF",
  "category": [
    "ai",
    "robotics",
    "embedded-systems",
    "sp"
  ],
  "githubUrl": "https://github.com/arece-fs",
  "demoUrl": "https://arece.eu/en",
  "tags": [
    "Python",
    "PyTorch",
    "ROS2",
    "Graph Machine Learning"
  ],
  "status": "completed",
  "id": "autonomous-racing-car",
  "markdown": "# Autonomous Racing ECE\n## Overview\n\nDeveloped an **AI-powered trajectory planning system** for ARECE, an autonomous racing vehicle competing in Formula Student competitions. The project addressed the critical challenge of real-time path optimization, reducing trajectory computation time from **17.31 seconds to <1ms per segment** using machine learning — a **17,000x speedup** enabling true real-time autonomous racing.\n\n**Role:** Technical lead for the Trajectory subsystem within a 30-student team, coordinating with Perception (cone detection), Manufacturing (localization), and Control (vehicle actuation) teams.\n\n## Technical Approach\n\n### Architecture\n\nThe system operates as a critical pipeline component in the autonomous stack:\n- **Inputs:** Cone positions from LiDAR/camera perception + vehicle localization (ROS2 topics)\n- **Output:** Optimal racing trajectory published to control system\n- **Framework:** ROS2 for inter-module communication, PyTorch for neural network inference\n\n### Trajectory Generation Pipeline\n\n**Phase 1: Training Data Generation**\n1. **Circuit Generation (FS1):** Synthetic track creation using random point generation → concave hull → spline interpolation → subsampling to simulate diverse racing circuits\n2. **Optimal Baseline (FS2):** Minimum curvature algorithm based on [Heilmeier's racing trajectory optimization](https://github.com/TUMFTM/global_racetrajectory_optimization) to compute ground-truth optimal paths considering vehicle dynamics (max speed, weight, drag coefficient, steering limits)\n3. **Dataset Creation (FS3):** GUI-based tooling for dataset curation and format standardization\n\n**Phase 2: Neural Network Design**\n- **Input Features:** Normal length vectors and angular changes (α) at track boundaries\n- **Output:** Waypoint coordinates along optimal racing line\n- **Architecture:** Feed-forward network trained on synthetic track/trajectory pairs\n- **Loss Function:** Custom loss optimizing trajectory smoothness and speed profiles\n\n**Phase 3: Real-Time Inference (FS5-FS7)**\n1. Select relevant forward/rear cones from perception stream\n2. Neural network inference (<1ms per segment)\n3. Publish trajectory commands via ROS2 to control module\n\n### Key Algorithms\n- **Minimum Curvature Path Planning:** Quasi-Steady-State (QSS) approach for baseline trajectory optimization\n- **Graph ML Techniques:** Applied to structured cone/track data representation\n- **Speed Profile Generation:** Dynamic velocity constraints computed from curvature analysis\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **17s computation time** (non-real-time) | Replaced iterative minimum curvature solver with neural network inference achieving <1ms latency |\n| **Corner tracking instability** | Refined input feature engineering (normal vectors, angular deltas) to improve curved path representation |\n| **Normal vector crossings** in synthetic tracks | Implemented geometric validation during circuit generation to ensure track consistency |\n| **Model training time** | Optimized dataset size/architecture balance; batch generation of diverse training circuits |\n| **Simulation integration** | Developed ROS2 bridge for seamless AI model deployment in Gazebo/real vehicle testing |\n\n## Results / Impact\n\n**Performance Metrics:**\n- ✅ **17,310ms → <1ms** trajectory computation (17,000x improvement)\n- ✅ Real-time operation enabling competitive autonomous racing\n- ✅ Successfully integrated with perception and control subsystems\n- ✅ Validated through 2D/1D trajectory visualization and speed command analysis\n\n**Technical Contributions:**\n- Pioneered ML-based trajectory planning in resource-constrained embedded racing environment\n- Demonstrated practical application of neural networks replacing computationally expensive optimization algorithms\n- Created reusable synthetic track generation framework for training data augmentation\n\n**Team Leadership:**\n- Coordinated 4-team architecture (Manufacturing, Perception, Trajectory, DevOps)\n- Delivered production-ready system for Formula Student Driverless competition\n- Documented system for future development (PPE continuation planned)\n\n## References\n\n- [ARECE Formula Student Team](https://arece.eu/en)\n- [Project GitHub](https://github.com/arece-fs)\n- **Technical Foundation:** Garlick, S. & Braley, A. \"Real-Time Optimal Trajectory Planning for Autonomous Vehicles and Lap Time Simulation Using Machine Learning\"\n- **Algorithm Basis:** Heilmeier, A. [\"Racecar Trajectory Optimization\"](https://github.com/TUMFTM/global_racetrajectory_optimization)\n- **Industry Context:** NHTSA (2015) - 94% of road accidents caused by human error; autonomous racing as AV development testbed (Skeete, 2019)\n\n**Technologies:** Python, PyTorch, ROS2, Graph ML, Neural Network Inference, Vehicle Dynamics Modeling, Real-Time Systems"
}
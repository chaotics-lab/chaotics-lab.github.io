{
  "title": "PersonaPlay (Netflix Clone)",
  "date": "2023-03-10",
  "titleColor": "#FFFFFF",
  "description": "Developed a fullstack Netflix-like application for browsing and watching videos with features like forums, reviews, and search.",
  "imageUrl": "/img/personaplay",
  "logoUrl": "/img/personaplay/logo.png",
  "githubUrl": "https://github.com/Loxed/PersonaPlayApplication",
  "themeColor": "#393939",
  "logoBackgroundColor": "transparent",
  "category": [
    "software",
    "gui",
    "app",
    "back"
  ],
  "tags": [
    "JavaFX",
    "Hibernate",
    "MySQL",
    "MVC",
    "APIs"
  ],
  "status": "completed",
  "id": "personaplay-(netflix-clone)",
  "markdown": "## Overview\n\nA **full-stack Netflix-inspired streaming platform** built with JavaFX, featuring video browsing, user authentication, community forums, reviews, and search functionality. The project demonstrates comprehensive software engineering principles including MVC architecture, ORM patterns, RESTful API integration, and database design — creating a production-ready desktop application for media consumption and social interaction.\n\n**Key Features:** User account management with email verification, video catalog with metadata, community forums for discussions, rating/review system, search with filters, and watchlist management.\n\n## Technical Approach\n\n### System Architecture\n\n**Tech Stack:**\n- **Frontend:** JavaFX (desktop GUI framework with FXML for UI layouts)\n- **Backend:** Java with Hibernate ORM (object-relational mapping)\n- **Database:** MySQL (relational database for user data, videos, reviews, forums)\n- **HTTP Client:** OkHttp (API requests for external data sources)\n- **Build Tool:** Maven (dependency management, project build)\n- **Design Pattern:** MVC (Model-View-Controller) architecture\n\n**Application Structure:**\n```\n[JavaFX Views (FXML)] ↔ [Controllers] ↔ [Service Layer] ↔ [Hibernate ORM] ↔ [MySQL Database]\n                                ↓\n                        [External APIs (OkHttp)]\n```\n\n### Core Systems\n\n**1. User Authentication & Authorization**\n\n**Registration Flow:**\n```java\n// User entity with Hibernate annotations\n@Entity\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false)\n    private String email;\n    \n    @Column(nullable = false)\n    private String passwordHash;  // BCrypt hashed\n    \n    @Column(nullable = false)\n    private boolean isVerified;\n    \n    private String verificationCode;\n    \n    @OneToMany(mappedBy = \"user\")\n    private List<Review> reviews;\n    \n    @ManyToMany\n    private List<Video> watchlist;\n}\n```\n\n**Email Verification:**\n- Generate random 6-digit confirmation code\n- Send via SMTP (JavaMail API)\n- Temporary code stored in database\n- Account activation upon successful verification\n- Session management for logged-in users\n\n**Security:**\n- Password hashing (BCrypt or similar)\n- SQL injection prevention via Hibernate parameterized queries\n- Session tokens for authentication persistence\n\n**2. Video Catalog System**\n\n**Database Schema:**\n```sql\nCREATE TABLE videos (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    description TEXT,\n    release_year INT,\n    genre VARCHAR(100),\n    duration INT,  -- in minutes\n    thumbnail_url VARCHAR(500),\n    video_url VARCHAR(500),\n    average_rating DECIMAL(3,2),\n    view_count INT DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**Video Metadata:**\n- Title, description, release year, genre tags\n- Duration, thumbnail, video URL\n- Aggregate ratings (calculated from reviews)\n- View count tracking\n\n**API Integration (OkHttp):**\n```java\n// Fetch video metadata from external API (e.g., TMDb, OMDb)\npublic class VideoApiService {\n    private OkHttpClient client = new OkHttpClient();\n    \n    public VideoMetadata fetchVideoData(String imdbId) throws IOException {\n        Request request = new Request.Builder()\n            .url(\"https://api.example.com/videos/\" + imdbId)\n            .addHeader(\"Authorization\", \"Bearer \" + API_KEY)\n            .build();\n        \n        Response response = client.newCall(request).execute();\n        return parseJson(response.body().string());\n    }\n}\n```\n\n**Note:** ApiApplication class pre-populates database via batch API requests (avoid running due to rate limits).\n\n**3. Search & Filter System**\n\n**Search Features:**\n- **Text Search:** Title, description, actor names\n- **Filters:** Genre, release year, rating threshold\n- **Sorting:** Most popular, highest rated, newest, alphabetical\n\n**Hibernate Query Example:**\n```java\n@Repository\npublic class VideoRepository {\n    @Autowired\n    private SessionFactory sessionFactory;\n    \n    public List<Video> searchVideos(String query, String genre, Integer minYear) {\n        Session session = sessionFactory.getCurrentSession();\n        \n        CriteriaBuilder cb = session.getCriteriaBuilder();\n        CriteriaQuery<Video> cq = cb.createQuery(Video.class);\n        Root<Video> root = cq.from(Video.class);\n        \n        List<Predicate> predicates = new ArrayList<>();\n        \n        if (query != null) {\n            predicates.add(cb.like(root.get(\"title\"), \"%\" + query + \"%\"));\n        }\n        if (genre != null) {\n            predicates.add(cb.equal(root.get(\"genre\"), genre));\n        }\n        if (minYear != null) {\n            predicates.add(cb.greaterThanOrEqualTo(root.get(\"releaseYear\"), minYear));\n        }\n        \n        cq.where(predicates.toArray(new Predicate[0]));\n        return session.createQuery(cq).getResultList();\n    }\n}\n```\n\n**4. Community Forum System**\n\n**Forum Structure:**\n```java\n@Entity\npublic class ForumPost {\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @ManyToOne\n    private User author;\n    \n    @ManyToOne\n    private Video relatedVideo;  // Optional: video-specific discussions\n    \n    private String title;\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String content;\n    \n    @OneToMany(mappedBy = \"post\")\n    private List<ForumComment> comments;\n    \n    private LocalDateTime createdAt;\n    private int upvotes;\n}\n```\n\n**Features:**\n- Create discussion threads\n- Comment/reply system\n- Upvote/downvote mechanism\n- Video-specific forums (discussion tied to specific content)\n- User reputation based on post engagement\n\n**5. Review & Rating System**\n\n**Review Entity:**\n```java\n@Entity\npublic class Review {\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @ManyToOne\n    private User user;\n    \n    @ManyToOne\n    private Video video;\n    \n    private int rating;  // 1-5 stars\n    \n    @Column(columnDefinition = \"TEXT\")\n    private String reviewText;\n    \n    private LocalDateTime createdAt;\n    \n    private int helpfulCount;  // \"Was this review helpful?\" votes\n}\n```\n\n**Aggregate Rating Calculation:**\n```java\npublic void updateVideoAverageRating(Long videoId) {\n    List<Review> reviews = reviewRepository.findByVideoId(videoId);\n    double average = reviews.stream()\n        .mapToInt(Review::getRating)\n        .average()\n        .orElse(0.0);\n    \n    Video video = videoRepository.findById(videoId);\n    video.setAverageRating(average);\n    videoRepository.save(video);\n}\n```\n\n**6. Watchlist Management**\n\n**User Watchlist:**\n- Add/remove videos to personal collection\n- Many-to-many relationship (User ↔ Video)\n- Quick access from home screen\n- \"Continue watching\" feature (track progress)\n\n**7. JavaFX UI Design**\n\n**FXML Layout Example:**\n```xml\n<!-- VideoCard.fxml -->\n<VBox xmlns:fx=\"http://javafx.com/fxml\">\n    <ImageView fx:id=\"thumbnail\" fitWidth=\"200\" preserveRatio=\"true\"/>\n    <Label fx:id=\"titleLabel\" styleClass=\"video-title\"/>\n    <HBox>\n        <Label fx:id=\"ratingLabel\"/>\n        <Label fx:id=\"yearLabel\"/>\n    </HBox>\n    <Button text=\"Play\" onAction=\"#handlePlayButton\"/>\n    <Button text=\"Add to Watchlist\" onAction=\"#handleWatchlistButton\"/>\n</VBox>\n```\n\n**Controller Pattern:**\n```java\npublic class VideoCardController {\n    @FXML private ImageView thumbnail;\n    @FXML private Label titleLabel;\n    \n    private Video video;\n    private VideoService videoService;\n    \n    public void initialize(Video video) {\n        this.video = video;\n        titleLabel.setText(video.getTitle());\n        // Load thumbnail asynchronously\n        loadThumbnail(video.getThumbnailUrl());\n    }\n    \n    @FXML\n    private void handlePlayButton() {\n        videoService.playVideo(video);\n    }\n}\n```\n\n**UI Features:**\n- Grid layout for video browsing (Netflix-style cards)\n- Video player integration (JavaFX MediaView)\n- Responsive design with CSS styling\n- Scene navigation (login → home → video details → player)\n\n### MVC Architecture\n\n**Separation of Concerns:**\n- **Model:** Hibernate entities (User, Video, Review, ForumPost)\n- **View:** FXML files defining UI layouts\n- **Controller:** Java classes handling user input and business logic\n- **Service Layer:** Business logic abstraction (VideoService, UserService)\n- **Repository:** Database access via Hibernate (VideoRepository, UserRepository)\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **Database initialization** | Provided SQL scripts (schema.sql, insert.sql) for setup; ApiApplication for bulk import |\n| **Email verification** | Integrated SMTP client; temporary code storage in DB; timeout mechanism |\n| **Hibernate configuration** | persistence.xml for connection pooling; lazy/eager loading tuning |\n| **API rate limits** | Cached responses; warning against running ApiApplication multiple times |\n| **Video streaming** | JavaFX MediaView with URL-based playback; fallback for unsupported formats |\n| **Concurrent database access** | Hibernate session management; transaction isolation levels |\n| **Large dataset UI performance** | Pagination for search results; lazy loading images |\n\n## Results / Impact\n\n**Application Features:**\n- ✅ **User accounts** with email verification and secure authentication\n- ✅ **Video catalog** with metadata from external APIs\n- ✅ **Search & filter** system with multiple criteria\n- ✅ **Community forums** for user discussions\n- ✅ **Review system** with star ratings and aggregate scores\n- ✅ **Watchlist** management for personalized collections\n- ✅ **Desktop application** (cross-platform via JavaFX)\n\n**Technical Achievements:**\n- Designed **relational database schema** with proper normalization\n- Implemented **ORM patterns** using Hibernate (entities, repositories, transactions)\n- Applied **MVC architecture** for clean separation of concerns\n- Integrated **external APIs** via OkHttp for content enrichment\n- Built **responsive UI** with JavaFX and FXML\n- Developed **full-stack application** from database to user interface\n\n**Engineering Skills:**\n- **Full-Stack Development:** Frontend (JavaFX) + Backend (Java) + Database (MySQL)\n- **ORM & Database Design:** Hibernate annotations, entity relationships, query optimization\n- **API Integration:** RESTful API consumption, JSON parsing, HTTP clients\n- **Software Architecture:** MVC pattern, service layer, repository pattern\n- **Build & Dependency Management:** Maven for project structure\n\n**Learning Outcomes:**\n- **Enterprise Java:** Hibernate, JPA, dependency injection concepts\n- **Database Design:** Schema design, foreign keys, indexing strategies\n- **Desktop Application Development:** JavaFX scene management, event handling\n- **Project Structure:** Multi-layer architecture, separation of concerns\n\n## References\n\n- [GitHub Repository](https://github.com/Loxed/PersonaPlayApplication)\n- **Technologies:**\n  - [JavaFX](https://openjfx.io/) - Rich desktop application framework\n  - [Hibernate ORM](https://hibernate.org/) - Object-relational mapping\n  - [OkHttp](https://square.github.io/okhttp/) - HTTP client\n  - [MySQL](https://www.mysql.com/) - Relational database\n  - [Maven](https://maven.apache.org/) - Build automation\n\n**Technologies:** JavaFX, Hibernate, MySQL, OkHttp, Maven, MVC Architecture, ORM, REST APIs, FXML, Java, SQL, Email Integration (SMTP), Session Management"
}
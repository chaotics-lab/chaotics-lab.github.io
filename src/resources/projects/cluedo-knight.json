{
  "title": "Cluedo Knight",
  "date": "2021-11-10",
  "titleColor": "#FFFFFF",
  "description": "A digital adaptation of the classic Cluedo board game, featuring a hollow knight theme and interactive gameplay.",
  "imageUrl": "/img/cluedo",
  "logoUrl": "/img/cluedo/logo.png",
  "themeColor": "#42009c",
  "logoBackgroundColor": "transparent",
  "githubUrl": "https://github.com/Loxed/cluedo-knight",
  "category": [
    "game",
    "app"
  ],
  "tags": [
    "C++",
    "Allegro 4",
    "Pixel Art",
    "OOP"
  ],
  "status": "completed",
  "id": "cluedo-knight",
  "markdown": "## Overview\n\nA **thematic digital reimagining** of the classic Cluedo (Clue) murder mystery board game, set in the haunting underground kingdom of Hallownest from *Hollow Knight*. Built in C++ with Allegro 4, this project transforms the traditional Victorian mansion mystery into an atmospheric pixel-art adventure through the fallen bug civilization, featuring iconic characters, signature weapons, and memorable locations from Team Cherry's beloved Metroidvania.\n\n**Game Concept:** Players navigate Hallownest's interconnected caverns as warriors and wanderers, deducing which character committed murder, with which weapon, and in which location through strategic interrogation and elimination.\n\n## Technical Approach\n\n### Architecture\n\n**Tech Stack:**\n- **Language:** C++ with object-oriented design patterns\n- **Graphics Engine:** Allegro 4 (2D sprite rendering, event handling)\n- **Art Style:** Custom pixel art faithful to Hollow Knight's monochromatic aesthetic\n- **Design Paradigm:** OOP architecture separating game logic, rendering, and user input\n\n### Core Systems\n\n**1. Game Logic Engine**\n\n```cpp\n// Cluedo game structure adapted to Hallownest\nclass CluedoGame {\n    vector<Character*> suspects;           // 6 Hollow Knight characters\n    vector<Weapon*> murderWeapons;         // 6 weapons from the game\n    vector<Room*> hallownestLocations;     // 9 map locations\n    Solution* secretSolution;              // Hidden answer\n    vector<Card*> playerHands;             // Distributed clue cards\n    \n    void dealCards();\n    void processPlayerTurn();\n};\n\nclass DeductionSystem {\n    void suggestSolution(Character*, Weapon*, Room*);\n    Card* refuteSuggestion(Player*, Suggestion*);\n    bool makeFinalAccusation(Solution*);\n};\n```\n\n**Mystery Generation:**\n- Randomly select 1 character + 1 weapon + 1 location as solution\n- Remaining 18 cards distributed among 3-6 players\n- Players move between Hallownest areas, make suggestions, eliminate possibilities\n- First correct accusation wins; wrong accusation = elimination\n\n**2. Board Movement System**\n\n**Hallownest Navigation:**\n- **Graph-based layout:** Locations connected via tunnels/passages (mimicking the game's interconnected map)\n- **Dice roll mechanics:** 2D6 determines movement range per turn\n- **Secret passages:** Direct connections between distant areas\n- **Location entry rules:** Must enter area to make suggestion about that location\n\n**3. AI Opponent System**\n\n**Decision-Making Algorithm:**\n- Track all revealed cards across game history\n- Probability matrix for unknown cards (Bayesian inference)\n- Strategic suggestion generation targeting knowledge gaps\n- Defensive refutation logic (show least informative card when possible)\n\n```cpp\nclass AIPlayer : public Player {\n    map<Card*, float> knowledgeBase;\n    \n    void updateBeliefs(Suggestion, Card* revealed);\n    Suggestion generateSuggestion();  // Prioritize high-uncertainty cards\n    Card* chooseRefutationCard(vector<Card*> matching);\n};\n```\n\n**4. Hollow Knight Thematic Integration**\n\n**Visual Design:**\n- **Monochromatic palette:** Black/white/grey base (faithful to HK's art style)\n- **Selective color accents:** Blue (Soul), orange (infection), teal (Lumaflies)\n- **Atmospheric effects:** Particle systems for environmental details\n- **Character sprites:** Pixel art with idle/walking animations\n- **Location backgrounds:** Hand-painted scenes from Hallownest's areas\n\n**Card Design:**\n- 6 characters: Warriors, scholars, and wanderers from the game\n- 6 weapons: Iconic blades and tools (Nail, Needle, Club, Longnail, Scythe, Claw)\n- 9 locations: Memorable areas from Hallownest's map\n- All 21 cards directly reference Hollow Knight lore\n\n**5. UI/UX Design**\n\n**Game Screens:**\n- Main menu with Hallownest title card aesthetic\n- Player setup (name entry, character selection with portraits)\n- Game board view showing map layout\n- Detective notebook (checklist grid for eliminating cards)\n- Suggestion/accusation dialog boxes\n- Victory/defeat screens\n\n**Allegro 4 Rendering Pipeline:**\n- Double-buffered rendering for smooth animations\n- Sprite sheets for character frames\n- Hand-painted location backgrounds (pixel art)\n- Custom bitmap font rendering\n- Manual memory management (load/unload bitmaps)\n\n### Design Patterns Applied\n\n**Object-Oriented Architecture:**\n- **State Pattern:** Game phases (setup, turn sequence, movement, suggestion, accusation)\n- **Observer Pattern:** Notify players when cards are revealed\n- **Factory Pattern:** Generate and shuffle card deck\n- **Strategy Pattern:** Different AI difficulty levels\n- **Singleton:** Game instance manager\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **Adapting mansion layout** to Hallownest | Graph-based board respecting game's interconnected structure while maintaining Cluedo's strategic balance |\n| **AI difficulty balancing** | Tunable probability thresholds; AI uses logical deduction without cheating |\n| **Allegro 4 memory constraints** | Manual bitmap lifecycle; texture atlases; lazy loading for backgrounds |\n| **Information asymmetry** rendering | Layered UI: public board → private hand → investigation notes |\n| **Thematic consistency** | Pixel art style guide matching HK's 1-bit + accent color aesthetic |\n| **Turn management** (3-6 players) | Event queue system with clear turn indicators and phase announcements |\n\n## Results / Impact\n\n**Gameplay Features:**\n- ✅ **Full Cluedo ruleset** implementation (classic board game mechanics)\n- ✅ **3-6 player support** (human and AI players)\n- ✅ **Atmospheric presentation** faithful to Hollow Knight's melancholic tone\n- ✅ **Replayability:** Randomized solutions (216 possible combinations)\n- ✅ **Complete game loop:** Setup → investigation → deduction → resolution\n\n**Technical Achievements:**\n- Demonstrated mastery of **OOP principles** (inheritance, polymorphism, encapsulation)\n- Applied **game AI** techniques (knowledge representation, probabilistic reasoning)\n- Gained experience with **2D game development** pipeline (design → art → code → testing)\n- Learned **legacy library integration** (Allegro 4's C-style API in modern C++)\n\n**Artistic Contributions:**\n- **Custom pixel art:** Character sprites with animations, weapon icons, location backgrounds\n- **UI design:** Victorian detective aesthetic merged with Hollow Knight's minimalism\n- **Thematic fusion:** Successfully adapted murder mystery to dark fantasy setting\n\n**Learning Outcomes:**\n- **Game Design:** Turn-based mechanics, information asymmetry, deduction gameplay\n- **Software Architecture:** State machines, event-driven programming, MVC pattern\n- **Asset Management:** Sprite sheets, bitmap atlases, font rendering in Allegro 4\n- **Algorithm Design:** AI decision trees, probability tracking, graph traversal\n- **Creative Adaptation:** Translating existing IP into new gameplay context\n\n## References\n\n- [GitHub Repository](https://github.com/Loxed/cluedo-knight)\n- **Original Game:** Cluedo/Clue by Hasbro (6 suspects, 6 weapons, 9 rooms)\n- **Theme Inspiration:** *Hollow Knight* by Team Cherry (2017 Metroidvania)\n- **Graphics Library:** [Allegro 4 Documentation](https://liballeg.org/)\n\n**Technologies:** C++, Allegro 4, OOP Design Patterns, Game AI, Pixel Art, State Machines, 2D Graphics Rendering, Event-Driven Programming"
}
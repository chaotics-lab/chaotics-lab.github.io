{
  "title": "Air Traffic Simulation",
  "date": "2022-04-03",
  "titleColor": "#000000",
  "description": "An air traffic simulation using graph-theory enabling automatic planes, airport management, weather event rerouting.",
  "imageUrl": "/img/kvl",
  "logoUrl": "/img/kvl/logo.png",
  "themeColor": "#9CFFF7",
  "logoBackgroundColor": "#2991ce",
  "githubUrl": "https://github.com/Loxed/flight-traffic-simulation",
  "category": [
    "game",
    "app",
    "software",
    "gui"
  ],
  "tags": [
    "C++",
    "Allegro 4",
    "Graph Theory",
    "OOP"
  ],
  "type": "Academic Project",
  "id": "air-traffic-simulation",
  "markdown": "## Overview\n\nA **graph-theory-based air traffic control simulation** built in C++ with Allegro 4, featuring autonomous aircraft navigation, dynamic airport management, and real-time weather event rerouting. The project demonstrates practical application of computer science fundamentals (graph algorithms, OOP design patterns) to model complex real-world systems with spatial and temporal constraints.\n\n**Core Concept:** Airports and flight routes form a **weighted directed graph**, where nodes represent airports and edges represent flight paths. Aircraft autonomously navigate this network using pathfinding algorithms, adapting to dynamic conditions like weather disruptions and airport capacity constraints.\n\n## Technical Approach\n\n### Architecture\n\n**Tech Stack:**\n- **Language:** C++ (object-oriented design)\n- **Graphics Library:** Allegro 4 (2D rendering, event handling)\n- **Algorithm Foundation:** Graph theory (Dijkstra's/A* pathfinding, network flow)\n- **Design Pattern:** Entity-Component architecture for aircraft/airport systems\n\n### Core Systems\n\n**1. Graph-Based Navigation Network**\n```cpp\n// Conceptual structure\nclass Airport {\n    Vector2D position;\n    int capacity;\n    vector<Route*> outgoingRoutes;\n    queue<Aircraft*> landingQueue;\n};\n\nclass Route {\n    Airport* origin;\n    Airport* destination;\n    float distance;\n    bool isAccessible;  // Affected by weather\n};\n```\n\n**2. Autonomous Aircraft System**\n- **Pathfinding:** Dijkstra's algorithm for optimal route calculation between origin/destination airports\n- **Dynamic Rerouting:** Real-time path recalculation when weather events close routes\n- **State Machine:** Aircraft behavior (taxiing, takeoff, cruising, landing) managed via finite state pattern\n- **Collision Avoidance:** Spatial partitioning for efficient proximity checks\n\n**3. Airport Management**\n- **Capacity Constraints:** Landing/takeoff queue management with FIFO scheduling\n- **Runway Allocation:** Resource contention handling for simultaneous flight operations\n- **Traffic Flow:** Balancing inbound/outbound aircraft to prevent congestion\n\n**4. Weather Event System**\n- **Dynamic Obstacles:** Weather events disable graph edges (routes) in real-time\n- **Cascade Effects:** Aircraft en-route automatically trigger pathfinding to find alternate routes\n- **Visual Feedback:** Allegro rendering shows affected routes and aircraft diversions\n\n### Algorithm Implementation\n\n**Pathfinding (Shortest Path):**\n- Dijkstra's algorithm for unweighted route finding\n- Edge weights represent distance/time between airports\n- Priority queue optimization for O((V + E) log V) complexity\n\n**Spatial Queries:**\n- Quadtree/grid-based spatial indexing for efficient aircraft proximity detection\n- Reduces collision checks from O(n²) to O(n log n)\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **Real-time pathfinding** performance | Implemented incremental graph updates; cached common routes |\n| **Allegro 4 legacy API** limitations | Custom abstraction layer for graphics primitives; event polling optimization |\n| **Aircraft synchronization** complexity | Used delta-time-based movement for frame-rate independence; state machines for behavior |\n| **Weather event propagation** | Event bus pattern for broadcasting route changes to affected aircraft |\n| **Visual debugging** of graph structure | Overlay rendering mode showing graph edges, active paths, and airport states |\n| **Memory management** in C++ | RAII principles; smart pointers for aircraft/route lifecycle management |\n\n## Results / Impact\n\n**Simulation Capabilities:**\n- ✅ **Autonomous navigation:** Aircraft independently calculate and follow routes\n- ✅ **Dynamic adaptation:** Real-time rerouting around weather-blocked routes\n- ✅ **Scalability:** Handles multiple simultaneous flights with efficient graph operations\n- ✅ **Visual feedback:** 2D graphical representation of entire air traffic network\n\n**Technical Achievements:**\n- Demonstrated mastery of **graph algorithms** in practical simulation context\n- Applied **OOP design patterns** (State, Observer, Factory) for modular architecture\n- Gained proficiency in **C++ systems programming** and legacy library integration\n- Developed understanding of **real-time systems** constraints and optimization\n\n**Learning Outcomes:**\n- **Graph Theory:** Practical implementation of Dijkstra's algorithm, dynamic graph modifications\n- **Event-Driven Programming:** Handling asynchronous weather events and aircraft state changes\n- **Performance Optimization:** Spatial indexing, algorithm complexity analysis\n- **Legacy Code Integration:** Working with Allegro 4's procedural C-style API in modern C++\n\n## References\n\n- [GitHub Repository](https://github.com/Loxed/flight-traffic-simulation)\n- **Graphics Library:** [Allegro 4 Documentation](https://liballeg.org/)\n- **Algorithm Reference:** Dijkstra's Algorithm for shortest path in weighted graphs\n- **Design Patterns:** Gang of Four (State, Observer patterns for game systems)\n\n**Technologies:** C++, Allegro 4, Graph Theory, Dijkstra's Algorithm, OOP Design Patterns, Event-Driven Architecture, 2D Graphics, Spatial Partitioning"
}
{
  "title": "Porypal",
  "date": "2025-03-28",
  "titleColor": "#FFFFFF",
  "description": "Image processing, tileset editor and palette injector for automatic custom graphics in Gen 3 ROM hacks.",
  "imageUrl": "/img/porypal",
  "logoUrl": "/img/porypal/logo.png",
  "themeColor": "#2139ef",
  "logoBackgroundColor": "transparent",
  "category": [
    "software",
    "gui",
    "sp",
    "app"
  ],
  "githubUrl": "https://github.com/Loxed/porypal",
  "tags": [
    "Python",
    "Qt"
  ],
  "type": "Personal Project",
  "id": "porypal",
  "markdown": "## Overview\n\n**Porypal** is a specialized image processing tool for Pokémon Gen 3 ROM hacking, automating the conversion of modern graphics into Game Boy Advance-compatible sprites and tilesets. The project addresses the tedious manual workflow required by the [GBA's tile-based rendering architecture](https://www.copetti.org/writings/consoles/game-boy-advance/), which enforces strict palette and tile layout constraints that make batch sprite creation error-prone and time-consuming.\n\n**Use Case:** ROM hackers working on binary hacks or decompilation projects (pokeemerald, pokefirered) need to convert hundreds of character sprites, overworld tiles, and UI elements while maintaining consistency with GBA hardware limitations.\n\n## Technical Approach\n\n### GBA Graphics Constraints\n\nThe Game Boy Advance's PPU (Picture Processing Unit) enforces hardware-level restrictions:\n- **16-color palettes:** Each sprite/tileset limited to 15 colors + 1 transparency slot\n- **8×8 tile system:** All graphics decomposed into 64-pixel tiles for VRAM optimization\n- **JASC-PAL format:** Palette files must use specific RGB color ordering\n- **LZ77 compression:** ROM space savings require tile data in compressible formats\n\n**Manual Workflow Pain Points:**\n- Photoshop/GIMP exports don't respect GBA palette ordering\n- Tile alignment errors cause visual glitches in-game\n- Large sprite sheets (100+ frames) require hours of manual tile arrangement\n- Palette inconsistencies between related sprites break visual coherence\n\n### Core Systems\n\n**1. Intelligent Color Quantization**\n\n```python\n# Color space mapping to nearest JASC-PAL colors\ndef quantize_to_palette(image, palette, preserve_transparency=True):\n    # Convert image to indexed color mode\n    indexed = image.convert('P', palette=palette)\n    \n    # Ensure slot 0 is transparent (GBA requirement)\n    if preserve_transparency:\n        indexed.putpalette([255, 0, 255] + palette[3:])  # Magenta = transparent\n    \n    # Validate 16-color limit\n    unique_colors = len(set(indexed.getdata()))\n    if unique_colors > 16:\n        raise PaletteException(f\"Image uses {unique_colors} colors (max 16)\")\n    \n    return indexed\n```\n\n**Features:**\n- Perceptual color matching (CIEDE2000 color distance)\n- Automatic palette reduction from 24-bit RGB → 4-bit indexed\n- Transparency slot enforcement (index 0)\n- Dithering options for gradient preservation\n\n**2. Tile-Based Image Decomposition**\n\n**8×8 Tile Grid System:**\n```python\ndef split_into_tiles(image, tile_size=8):\n    tiles = []\n    width, height = image.size\n    \n    for y in range(0, height, tile_size):\n        for x in range(0, width, tile_size):\n            tile = image.crop((x, y, x+tile_size, y+tile_size))\n            tiles.append({\n                'data': tile,\n                'position': (x//tile_size, y//tile_size),\n                'hash': hash_tile(tile)  # Deduplication\n            })\n    \n    return tiles\n```\n\n**Tile Editor Features:**\n- Interactive drag-and-drop rearrangement\n- Duplicate tile detection (saves ROM space)\n- Flip/rotate operations (horizontal/vertical/90°)\n- Preview mode showing assembled image\n- Snap-to-grid alignment\n\n**3. Batch Processing & Automation**\n\n**YAML Preset System:**\n```yaml\n# sprite_preset.yml\nproject: pokeemerald\noutput_format: c_array\npalette_mode: shared  # All sprites use same palette\ntile_size: 8\ncompression: lz77\n\nfiles:\n  - input: characters/protagonist/*.png\n    output: src/data/graphics/trainers/\n    palette: palettes/trainer_shared.pal\n  \n  - input: overworld/npcs/*.png\n    output: src/data/graphics/object_events/\n    palette: auto  # Generate per-sprite\n```\n\n**CLI Integration:**\n```bash\n# Batch convert entire sprite directory\nporypal batch --preset sprite_preset.yml --verbose\n\n# Single file with custom palette\nporypal convert protagonist.png -p custom.pal -o output.c\n```\n\n**4. Qt-Based GUI**\n\n**Interface Components:**\n- **Canvas View:** Real-time preview of tile arrangement\n- **Palette Editor:** Visual color picker with JASC-PAL export\n- **Tile Grid:** Numbered tiles with selection/multi-select\n- **Properties Panel:** Tile metadata (usage count, coordinates, flips)\n- **Export Options:** Format selection (C array, raw binary, PNG)\n\n**Python/Qt Implementation:**\n```python\nclass TileEditorWidget(QWidget):\n    def __init__(self, tileset):\n        super().__init__()\n        self.tileset = tileset\n        self.selected_tiles = []\n        \n    def paintEvent(self, event):\n        painter = QPainter(self)\n        for idx, tile in enumerate(self.tileset.tiles):\n            x = (idx % self.cols) * TILE_SIZE\n            y = (idx // self.cols) * TILE_SIZE\n            painter.drawImage(x, y, tile.to_qimage())\n            \n            if idx in self.selected_tiles:\n                painter.setPen(QPen(Qt.red, 2))\n                painter.drawRect(x, y, TILE_SIZE, TILE_SIZE)\n    \n    def mousePressEvent(self, event):\n        tile_idx = self.get_tile_at_pos(event.pos())\n        if event.modifiers() & Qt.ControlModifier:\n            self.selected_tiles.append(tile_idx)\n        else:\n            self.selected_tiles = [tile_idx]\n        self.update()\n```\n\n**5. ROM Integration Formats**\n\n**Output Formats:**\n```c\n// C array for pokeemerald/pokefirered\nconst u32 gTrainerFrontPic_Protagonist[] = INCBIN_U32(\"graphics/trainers/front_pics/protagonist.4bpp.lz\");\nconst u16 gTrainerPalette_Protagonist[] = INCBIN_U16(\"graphics/trainers/palettes/protagonist.gbapal\");\n\n// Binary output for direct ROM insertion\n// .4bpp = 4 bits per pixel (16 colors)\n// .lz = LZ77 compressed\n// .gbapal = GBA palette format (RGB555)\n```\n\n**Compression:**\n- LZ77 algorithm reduces tile data size by 40-60%\n- Duplicate tile elimination (stores each unique 8×8 only once)\n- Run-length encoding for solid color tiles\n\n### Packaging & Distribution\n\n**PyInstaller Build:**\n```bash\n# Create standalone executable\npyinstaller --onefile --windowed \\\n    --add-data \"templates:templates\" \\\n    --add-data \"palettes:palettes\" \\\n    --icon=porypal.ico \\\n    porypal.py\n```\n\n**Cross-Platform Support:**\n- Windows: .exe with embedded Python runtime\n- macOS: .app bundle (code-signed for Gatekeeper)\n- Linux: AppImage with Qt dependencies\n\n## Challenges & Solutions\n\n| Challenge | Solution |\n|-----------|----------|\n| **Color quantization quality** | Implemented perceptual color distance (CIEDE2000) instead of Euclidean RGB |\n| **Tile deduplication** | Hash-based tile comparison with bit-exact matching; saves ROM space |\n| **Large file performance** | Lazy loading of tiles; only render visible grid area |\n| **Palette consistency** | Shared palette mode enforces color uniformity across sprite sets |\n| **Qt dependency hell** | PyInstaller bundles all libraries; users don't need Python installed |\n| **ROM format variations** | Abstracted export layer supports multiple output formats (C, binary, asm) |\n| **Transparency handling** | Enforces index 0 = transparent; auto-detects magenta/alpha channels |\n\n## Results / Impact\n\n**Workflow Improvements:**\n- ✅ **10x faster sprite conversion** vs manual tile arrangement\n- ✅ **Zero palette errors** with automatic color quantization\n- ✅ **Batch processing** enables 100+ sprite updates in minutes\n- ✅ **Visual consistency** via shared palettes across related sprites\n- ✅ **ROM space savings** through duplicate tile elimination\n\n**Community Adoption:**\n- Used by Pokémon ROM hacking community (pokecommunity.com, Reddit r/PokemonROMhacks)\n- Integrated into popular decompilation projects (pokeemerald, pokefirered)\n- Reduced barrier to entry for sprite artists unfamiliar with GBA constraints\n\n**Technical Achievements:**\n- Built **domain-specific tool** for niche retro game development\n- Applied **image processing algorithms** (color quantization, tile segmentation)\n- Designed **user-friendly GUI** abstracting technical complexity\n- Created **automated pipeline** replacing 5+ manual steps\n\n**Learning Outcomes:**\n- **Retro Hardware Constraints:** Understanding GBA PPU architecture, VRAM limitations\n- **Image Processing:** Color space conversion, palette reduction, compression\n- **GUI Development:** Qt event handling, custom widgets, paint systems\n- **Packaging:** PyInstaller, cross-platform distribution, dependency bundling\n\n## References\n\n- [GitHub Repository](https://github.com/Loxed/porypal)\n- **GBA Architecture:** [Rodrigo Copetti's GBA writeup](https://www.copetti.org/writings/consoles/game-boy-advance/)\n- **Decompilation Projects:** [pokeemerald](https://github.com/pret/pokeemerald), [pokefirered](https://github.com/pret/pokefirered)\n- **Community:** [PokéCommunity ROM Hacking](https://www.pokecommunity.com/forumdisplay.php?f=289)\n\n**Technologies:** Python, Qt (PyQt5/PySide), PIL/Pillow, PyInstaller, YAML, Image Processing, Color Quantization, Tile-Based Graphics, GBA Development, ROM Hacking"
}
{
  "title": "Porypal",
  "date": "2025-03-28",
  "titleColor": "#FFFFFF",
  "description": "Image processing, tileset editor and palette injector for automatic custom graphics in Gen 3 ROM hacks.",
  "imageUrl": "/img/porypal",
  "logoUrl": "/img/porypal/logo.png",
  "themeColor": "#2139ef",
  "logoBackgroundColor": "transparent",
  "category": [
    "software",
    "gui",
    "sp",
    "app"
  ],
  "repoUrl": "https://github.com/Loxed/porypal",
  "tags": [
    "Python",
    "Qt"
  ],
  "status": "completed",
  "id": "porypal",
  "markdown": "## Overview\n[Porypal](https://github.com/Loxed/porypal) is a tool for Pokémon Gen 3 ROM hacking (binary hacking and decompilation projects such as pokeemerald/pokefirered) that automates converting images into game-ready sprites and tilesets. The [Game Boy Advance's (GBA) architecture](https://www.copetti.org/writings/consoles/game-boy-advance/) enforces strict rules for colors and tile layouts, making manual conversion slow and error-prone. Porypal streamlines this process.\n## Challenges\nPokémon Gen 3 graphics require:\n- A **16-color palette**, with the first slot reserved for transparency\n- **8x8 tile-based graphics** to match the GBA rendering system\n- Proper format for batch integration and LZ77-compatible storage\nManual conversion can easily introduce errors or inconsistencies, especially for large sprite or tileset sets.\n## Technical Approach\n- **Color Conversion:** Automatically maps each pixel to the closest JASC-PAL color, preserving up to 16 distinct colors\n- **Tile Management:** Splits images into 8x8 tiles and provides an interactive editor for rearrangement\n- **Automation:** Supports batch processing and YAML-based presets for consistent workflows\n- **Interface:** Built with Python 3.6+ and Qt, giving users a GUI to preview and edit tiles\n- **Packaging:** Uses PyInstaller to build standalone executables for cross-platform usage\n## Impact\nWith Porypal, users can generate accurate game-ready graphics quickly, reducing errors, maintaining visual consistency, and saving hours of manual work. It integrates seamlessly into Pokémon decompilation workflows, making large-scale sprite updates practical and reliable."
  }